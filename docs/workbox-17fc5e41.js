define("./workbox-17fc5e41.js",["exports"],(function(e){"use strict";try{self["workbox:core:6.0.2"]&&_()}catch(e){}const t={"invalid-value":({paramName:e,validValueDescription:t,value:s})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of `+JSON.stringify(s)+"."},"not-an-array":({moduleName:e,className:t,funcName:s,paramName:r})=>{if(!(e&&t&&s&&r))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${r}' passed into '${e}.${t}.${s}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:s,className:r,funcName:a})=>{if(!(e&&t&&s&&a))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${s}.${r?r+".":""}${a}()' must be of type ${e}.`},"incorrect-class":({expectedClass:e,paramName:t,moduleName:s,className:r,funcName:a,isReturnValueProblem:n})=>{if(!e||!s||!a)throw new Error("Unexpected input to 'incorrect-class' error.");return n?`The return value from '${s}.${r?r+".":""}${a}()' must be an instance of class ${e.name}.`:`The parameter '${t}' passed into '${s}.${r?r+".":""}${a}()' must be an instance of class ${e.name}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:s,className:r,funcName:a})=>{if(!(e&&t&&s&&r&&a))throw new Error("Unexpected input to 'missing-a-method' error.");return`${s}.${r}.${a}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return"Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL "+e._entryId+" but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries."},"plugin-error-request-will-fetch":({thrownError:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e.message}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:s,paramName:r})=>`The supplied '${r}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${s} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:s,className:r,funcName:a,paramName:n})=>`The supplied '${n}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${s}.${r}.${a}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:s})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${s}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:s})=>`You must define either config.statuses or config.headersin ${e}.${t}.${s}`,"invalid-string":({moduleName:e,funcName:t,paramName:s})=>{if(!s||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${s}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:s})=>`The start (${t}) and end (${s}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let s=`The strategy could not generate a response for '${e}'.`;return t&&(s+=` The underlying error is ${t}.`),s},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed`+(t?` with an HTTP status of ${t}.`:"."),"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>"Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL "+e+" with different integrity values. Please remove one of them.","missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`,"cross-origin-copy-response":({origin:e})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${e}.`},s=(e,s={})=>{const r=t[e];if(!r)throw new Error(`Unable to find message for code '${e}'.`);return r(s)};class r extends Error{constructor(e,t){super(s(e,t)),this.name=e,this.details=t}}const a=(e,t,s)=>{if("function"!==typeof e[t])throw s.expectedMethod=t,new r("missing-a-method",s)},n=(e,t)=>{if(!Array.isArray(e))throw new r("not-an-array",t)},o=(e,t,s)=>{if(!(e instanceof t))throw s.expectedClass=t,new r("incorrect-class",s)},i=(e,t,s)=>{if(!t.includes(e))throw s.validValueDescription=`Valid values are ${JSON.stringify(t)}.`,new r("invalid-value",s)},c=(e,t,s)=>{if(typeof e!==t)throw s.expectedType=t,new r("incorrect-type",s)},h=(()=>{"__WB_DISABLE_DEV_LOGS"in self||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},s=function(s,r){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===s&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[s](...r);const a=e?[]:["%cworkbox",["background: "+t[s],"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[s](...a,...r),"groupCollapsed"===s&&(e=!0),"groupEnd"===s&&(e=!1)},r={},a=Object.keys(t);for(const e of a){const t=e;r[t]=(...e)=>{s(t,e)}}return r})();try{self["workbox:routing:6.0.2"]&&_()}catch(e){}const u=["DELETE","GET","HEAD","PATCH","POST","PUT"],l=e=>e&&"object"==typeof e?(a(e,"handle",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),e):(c(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),{handle:e});class d{constructor(e,t,s="GET"){c(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"match"}),s&&i(s,u,{paramName:"method"}),this.handler=l(t),this.match=e,this.method=s}}class p extends d{constructor(e,t,s){o(e,RegExp,{moduleName:"workbox-routing",className:"RegExpRoute",funcName:"constructor",paramName:"pattern"});super(({url:t})=>{const s=e.exec(t.href);if(s){if(t.origin===location.origin||0===s.index)return s.slice(1);h.debug(`The regular expression '${e}' only partially matched against the cross-origin URL '${t}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`)}},t,s)}}const m=e=>new URL(String(e),location.href).href.replace(new RegExp("^"+location.origin),"");class f{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",e=>{const{request:t}=e,s=this.handleRequest({request:t,event:e});s&&e.respondWith(s)})}addCacheListener(){self.addEventListener("message",e=>{if(e.data&&"CACHE_URLS"===e.data.type){const{payload:t}=e.data;h.debug("Caching URLs from the window",t.urlsToCache);const s=Promise.all(t.urlsToCache.map(t=>{"string"==typeof t&&(t=[t]);const s=new Request(...t);return this.handleRequest({request:s,event:e})}));e.waitUntil(s),e.ports&&e.ports[0]&&s.then(()=>e.ports[0].postMessage(!0))}})}handleRequest({request:e,event:t}){o(e,Request,{moduleName:"workbox-routing",className:"Router",funcName:"handleRequest",paramName:"options.request"});const s=new URL(e.url,location.href);if(!s.protocol.startsWith("http"))return void h.debug("Workbox Router only supports URLs that start with 'http'.");const r=s.origin===location.origin,{params:a,route:n}=this.findMatchingRoute({event:t,request:e,sameOrigin:r,url:s});let i=n&&n.handler;const c=[];i&&(c.push(["Found a route to handle this request:",n]),a&&c.push(["Passing the following params to the route's handler:",a]));const u=e.method;if(!i&&this._defaultHandlerMap.has(u)&&(c.push(`Failed to find a matching route. Falling back to the default handler for ${u}.`),i=this._defaultHandlerMap.get(u)),!i)return void h.debug("No route found for: "+m(s));let l;h.groupCollapsed("Router is responding to: "+m(s)),c.forEach(e=>{Array.isArray(e)?h.log(...e):h.log(e)}),h.groupEnd();try{l=i.handle({url:s,request:e,event:t,params:a})}catch(e){l=Promise.reject(e)}return l instanceof Promise&&this._catchHandler&&(l=l.catch(r=>(h.groupCollapsed(`Error thrown when responding to:  ${m(s)}. Falling back to Catch Handler.`),h.error("Error thrown by:",n),h.error(r),h.groupEnd(),this._catchHandler.handle({url:s,request:e,event:t})))),l}findMatchingRoute({url:e,sameOrigin:t,request:s,event:r}){const a=this._routes.get(s.method)||[];for(const n of a){let a;const o=n.match({url:e,sameOrigin:t,request:s,event:r});if(o)return o instanceof Promise&&h.warn(`While routing ${m(e)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`,n),a=o,(Array.isArray(o)&&0===o.length||o.constructor===Object&&0===Object.keys(o).length||"boolean"==typeof o)&&(a=void 0),{route:n,params:a}}return{}}setDefaultHandler(e,t="GET"){this._defaultHandlerMap.set(t,l(e))}setCatchHandler(e){this._catchHandler=l(e)}registerRoute(e){c(e,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),a(e,"match",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),c(e.handler,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),a(e.handler,"handle",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.handler"}),c(e.method,"string",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.method"}),this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new r("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(!(t>-1))throw new r("unregister-route-route-not-registered");this._routes.get(e.method).splice(t,1)}}let g;const w=()=>(g||(g=new f,g.addFetchListener(),g.addCacheListener()),g);function y(e,t,s){let a;if("string"==typeof e){const n=new URL(e,location.href);{if(!e.startsWith("/")&&!e.startsWith("http"))throw new r("invalid-string",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});const t=e.startsWith("http")?n.pathname:e,s="[*:?+]";new RegExp(""+s).exec(t)&&h.debug(`The '$capture' parameter contains an Express-style wildcard character (${s}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`)}a=new d(({url:t})=>(t.pathname===n.pathname&&t.origin!==n.origin&&h.debug(e+" only partially matches the cross-origin URL "+t+". This route will only handle cross-origin requests if they match the entire URL."),t.href===n.href),t,s)}else if(e instanceof RegExp)a=new p(e,t,s);else if("function"==typeof e)a=new d(e,t,s);else{if(!(e instanceof d))throw new r("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});a=e}return w().registerRoute(a),a}const b={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},N=e=>[b.prefix,e,b.suffix].filter(e=>e&&e.length>0).join("-"),R=e=>e||N(b.precache),v=e=>e||N(b.runtime);function C(e,t){const s=new URL(e);for(const e of t)s.searchParams.delete(e);return s.href}class ${constructor(){this.promise=new Promise((e,t)=>{this.resolve=e,this.reject=t})}}const k=new Set;try{self["workbox:strategies:6.0.2"]&&_()}catch(e){}function x(e){return"string"==typeof e?new Request(e):e}class T{constructor(e,t){this._cacheKeys={},o(t.event,ExtendableEvent,{moduleName:"workbox-strategies",className:"StrategyHandler",funcName:"constructor",paramName:"options.event"}),Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new $,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const e of this._plugins)this._pluginStateMap.set(e,{});this.event.waitUntil(this._handlerDeferred.promise)}fetch(e){return this.waitUntil((async()=>{const{event:t}=this;let s=x(e);if("navigate"===s.mode&&t instanceof FetchEvent&&t.preloadResponse){const e=await t.preloadResponse;if(e)return h.log(`Using a preloaded navigation response for '${m(s.url)}'`),e}const a=this.hasCallback("fetchDidFail")?s.clone():null;try{for(const e of this.iterateCallbacks("requestWillFetch"))s=await e({request:s.clone(),event:t})}catch(e){throw new r("plugin-error-request-will-fetch",{thrownError:e})}const n=s.clone();try{let e;e=await fetch(s,"navigate"===s.mode?void 0:this._strategy.fetchOptions),h.debug(`Network request for '${m(s.url)}' returned a response with status '${e.status}'.`);for(const s of this.iterateCallbacks("fetchDidSucceed"))e=await s({event:t,request:n,response:e});return e}catch(e){throw h.error(`Network request for '${m(s.url)}' threw an error.`,e),a&&await this.runCallbacks("fetchDidFail",{error:e,event:t,originalRequest:a.clone(),request:n.clone()}),e}})())}async fetchAndCachePut(e){const t=await this.fetch(e),s=t.clone();return this.waitUntil(this.cachePut(e,s)),t}cacheMatch(e){return this.waitUntil((async()=>{const t=x(e);let s;const{cacheName:r,matchOptions:a}=this._strategy,n=await this.getCacheKey(t,"read"),o={...a,cacheName:r};s=await caches.match(n,o),s?h.debug(`Found a cached response in '${r}'.`):h.debug(`No cached response found in '${r}'.`);for(const e of this.iterateCallbacks("cachedResponseWillBeUsed"))s=await e({cacheName:r,matchOptions:a,cachedResponse:s,request:n,event:this.event})||void 0;return s})())}async cachePut(e,t){const s=x(e);var a;await(a=0,new Promise(e=>setTimeout(e,a)));const n=await this.getCacheKey(s,"write");if(n.method&&"GET"!==n.method)throw new r("attempt-to-cache-non-get-request",{url:m(n.url),method:n.method});if(!t)throw h.error(`Cannot cache non-existent response for '${m(n.url)}'.`),new r("cache-put-with-no-response",{url:m(n.url)});const o=await this._ensureResponseSafeToCache(t);if(!o)return void h.debug(`Response '${m(n.url)}' will not be cached.`,o);const{cacheName:i,matchOptions:c}=this._strategy,u=await self.caches.open(i),l=this.hasCallback("cacheDidUpdate"),d=l?await async function(e,t,s,r){const a=C(t.url,s);if(t.url===a)return e.match(t,r);const n={...r,ignoreSearch:!0},o=await e.keys(t,n);for(const t of o)if(a===C(t.url,s))return e.match(t,r)}(u,n.clone(),["__WB_REVISION__"],c):null;h.debug(`Updating the '${i}' cache with a new Response for ${m(n.url)}.`);try{await u.put(n,l?o.clone():o)}catch(e){throw"QuotaExceededError"===e.name&&await async function(){h.log(`About to run ${k.size} callbacks to clean up caches.`);for(const e of k)await e(),h.log(e,"is complete.");h.log("Finished running callbacks.")}(),e}for(const e of this.iterateCallbacks("cacheDidUpdate"))await e({cacheName:i,oldResponse:d,newResponse:o.clone(),request:n,event:this.event})}async getCacheKey(e,t){if(!this._cacheKeys[t]){let s=e;for(const e of this.iterateCallbacks("cacheKeyWillBeUsed"))s=x(await e({mode:t,request:s,event:this.event,params:this.params}));this._cacheKeys[t]=s}return this._cacheKeys[t]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const s of this.iterateCallbacks(e))await s(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if("function"==typeof t[e]){const s=this._pluginStateMap.get(t),r=r=>{const a={...r,state:s};return t[e](a)};yield r}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve()}async _ensureResponseSafeToCache(e){let t=e,s=!1;for(const e of this.iterateCallbacks("cacheWillUpdate"))if(t=await e({request:this.request,response:t,event:this.event})||void 0,s=!0,!t)break;return s||(t&&200!==t.status&&(t=void 0),t&&200!==t.status&&(0===t.status?h.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):h.debug(`The response for '${this.request.url}' returned a status code of '${e.status}' and won't be cached as a result.`))),t}}class U{constructor(e={}){this.cacheName=v(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,s="string"==typeof e.request?new Request(e.request):e.request,r="params"in e?e.params:void 0,a=new T(this,{event:t,request:s,params:r}),n=this._getResponse(a,s,t);return[n,this._awaitComplete(n,a,s,t)]}async _getResponse(e,t,s){await e.runCallbacks("handlerWillStart",{event:s,request:t});let a=void 0;try{if(a=await this._handle(t,e),!a||"error"===a.type)throw new r("no-response",{url:t.url})}catch(r){for(const n of e.iterateCallbacks("handlerDidError"))if(a=await n({error:r,event:s,request:t}),a)break;if(!a)throw r;h.log(`While responding to '${m(t.url)}', an ${r} error occurred. Using a fallback response provided by a handlerDidError plugin.`)}for(const r of e.iterateCallbacks("handlerWillRespond"))a=await r({event:s,request:t,response:a});return a}async _awaitComplete(e,t,s,r){let a,n;try{a=await e}catch(n){}try{await t.runCallbacks("handlerDidRespond",{event:r,request:s,response:a}),await t.doneWaiting()}catch(e){n=e}if(await t.runCallbacks("handlerDidComplete",{event:r,request:s,response:a,error:n}),t.destroy(),n)throw n}}const q=(e,t)=>`Using ${e} to respond to '${m(t.url)}'`,E=e=>{e&&(h.groupCollapsed("View the final response here."),h.log(e||"[No response returned]"),h.groupEnd())};const L={cacheWillUpdate:async({response:e})=>200===e.status||0===e.status?e:null};try{self["workbox:cacheable-response:6.0.2"]&&_()}catch(e){}class P{constructor(e={}){if(!e.statuses&&!e.headers)throw new r("statuses-or-headers-required",{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor"});e.statuses&&n(e.statuses,{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor",paramName:"config.statuses"}),e.headers&&c(e.headers,"object",{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor",paramName:"config.headers"}),this._statuses=e.statuses,this._headers=e.headers}isResponseCacheable(e){o(e,Response,{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"isResponseCacheable",paramName:"response"});let t=!0;if(this._statuses&&(t=this._statuses.includes(e.status)),this._headers&&t&&(t=Object.keys(this._headers).some(t=>e.headers.get(t)===this._headers[t])),!t){h.groupCollapsed(`The request for '${m(e.url)}' returned a response that does not meet the criteria for being cached.`),h.groupCollapsed("View cacheability criteria here."),h.log("Cacheable statuses: "+JSON.stringify(this._statuses)),h.log("Cacheable headers: "+JSON.stringify(this._headers,null,2)),h.groupEnd();const t={};e.headers.forEach((e,s)=>{t[s]=e}),h.groupCollapsed("View response status and headers here."),h.log("Response status: "+e.status),h.log("Response headers: "+JSON.stringify(t,null,2)),h.groupEnd(),h.groupCollapsed("View full response details here."),h.log(e.headers),h.log(e),h.groupEnd(),h.groupEnd()}return t}}function S(e,t){const s=t();return e.waitUntil(s),s}try{self["workbox:precaching:6.0.2"]&&_()}catch(e){}function K(e){if(!e)throw new r("add-to-cache-list-unexpected-type",{entry:e});if("string"==typeof e){const t=new URL(e,location.href);return{cacheKey:t.href,url:t.href}}const{revision:t,url:s}=e;if(!s)throw new r("add-to-cache-list-unexpected-type",{entry:e});if(!t){const e=new URL(s,location.href);return{cacheKey:e.href,url:e.href}}const a=new URL(s,location.href),n=new URL(s,location.href);return a.searchParams.set("__WB_REVISION__",t),{cacheKey:a.href,url:n.href}}class W{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:t})=>{t&&(t.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:t,cachedResponse:s})=>{if("install"===e.type){const e=t.originalRequest.url;s?this.notUpdatedURLs.push(e):this.updatedURLs.push(e)}return s}}}class A{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:e,params:t})=>{const s=t&&t.cacheKey||this._precacheController.getCacheKeyForURL(e.url);return s?new Request(s):e},this._precacheController=e}}function O(e){const t=e.length;t>0&&(h.groupCollapsed("During precaching cleanup, "+t+" cached "+`request${1===t?" was":"s were"} deleted.`),((e,t)=>{h.groupCollapsed(e);for(const e of t)h.log(e);h.groupEnd()})("Deleted Cache Requests",e),h.groupEnd())}function M(e,t){if(0!==t.length){h.groupCollapsed(e);for(const e of t)h.log(e);h.groupEnd()}}let D;async function F(e,t){let s=null;if(e.url){s=new URL(e.url).origin}if(s!==self.location.origin)throw new r("cross-origin-copy-response",{origin:s});const a=e.clone(),n={headers:new Headers(a.headers),status:a.status,statusText:a.statusText},o=t?t(n):n,i=function(){if(void 0===D){const e=new Response("");if("body"in e)try{new Response(e.body),D=!0}catch(e){D=!1}D=!1}return D}()?a.body:await a.blob();return new Response(i,o)}const H={cacheWillUpdate:async({response:e})=>e.redirected?await F(e):e};class I extends U{constructor(e={}){e.cacheName=R(e.cacheName),super(e),this._fallbackToNetwork=!1!==e.fallbackToNetwork,this.plugins.push(H)}async _handle(e,t){const s=await t.cacheMatch(e);return s||(t.event&&"install"===t.event.type?await this._handleInstall(e,t):await this._handleFetch(e,t))}async _handleFetch(e,t){let s;if(!this._fallbackToNetwork)throw new r("missing-precache-entry",{cacheName:this.cacheName,url:e.url});h.warn(`The precached response for ${m(e.url)} in ${this.cacheName} was not found. Falling back to the network instead.`),s=await t.fetch(e);{const r=t.params&&t.params.cacheKey||await t.getCacheKey(e,"read");h.groupCollapsed("Precaching is responding to: "+m(e.url)),h.log("Serving the precached url: "+m(r.url)),h.groupCollapsed("View request details here."),h.log(e),h.groupEnd(),h.groupCollapsed("View response details here."),h.log(s),h.groupEnd(),h.groupEnd()}return s}async _handleInstall(e,t){const s=await t.fetchAndCachePut(e);let a=Boolean(s);if(s&&s.status>=400&&!this._usesCustomCacheableResponseLogic()&&(a=!1),!a)throw new r("bad-precaching-response",{url:e.url,status:s.status});return s}_usesCustomCacheableResponseLogic(){return this.plugins.some(e=>e.cacheWillUpdate&&e!==H)}}class j{constructor({cacheName:e,plugins:t=[],fallbackToNetwork:s=!0}={}){this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map,this._strategy=new I({cacheName:R(e),plugins:[...t,new A({precacheController:this})],fallbackToNetwork:s}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this._strategy}precache(e){this.addToCacheList(e),this._installAndActiveListenersAdded||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this._installAndActiveListenersAdded=!0)}addToCacheList(e){n(e,{moduleName:"workbox-precaching",className:"PrecacheController",funcName:"addToCacheList",paramName:"entries"});const t=[];for(const s of e){"string"==typeof s?t.push(s):s&&void 0===s.revision&&t.push(s.url);const{cacheKey:e,url:a}=K(s),n="string"!=typeof s&&s.revision?"reload":"default";if(this._urlsToCacheKeys.has(a)&&this._urlsToCacheKeys.get(a)!==e)throw new r("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(a),secondEntry:e});if("string"!=typeof s&&s.integrity){if(this._cacheKeysToIntegrities.has(e)&&this._cacheKeysToIntegrities.get(e)!==s.integrity)throw new r("add-to-cache-list-conflicting-integrities",{url:a});this._cacheKeysToIntegrities.set(e,s.integrity)}if(this._urlsToCacheKeys.set(a,e),this._urlsToCacheModes.set(a,n),t.length>0){const e=`Workbox is precaching URLs without revision info: ${t.join(", ")}\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;h.warn(e)}}}install(e){return S(e,async()=>{const t=new W;this.strategy.plugins.push(t);for(const[t,s]of this._urlsToCacheKeys){const r=this._cacheKeysToIntegrities.get(s),a=this._urlsToCacheModes.get(t),n=new Request(t,{integrity:r,cache:a,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:s},request:n,event:e}))}const{updatedURLs:s,notUpdatedURLs:r}=t;return function(e,t){const s=e.length,r=t.length;if(s||r){let a=`Precaching ${s} file${1===s?"":"s"}.`;r>0&&(a+=` ${r} file${1===r?" is":"s are"} already cached.`),h.groupCollapsed(a),M("View newly precached URLs.",e),M("View previously precached URLs.",t),h.groupEnd()}}(s,r),{updatedURLs:s,notUpdatedURLs:r}})}activate(e){return S(e,async()=>{const e=await self.caches.open(this.strategy.cacheName),t=await e.keys(),s=new Set(this._urlsToCacheKeys.values()),r=[];for(const a of t)s.has(a.url)||(await e.delete(a),r.push(a.url));return O(r),{deletedURLs:r}})}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}async matchPrecache(e){const t=e instanceof Request?e.url:e,s=this.getCacheKeyForURL(t);if(s){return(await self.caches.open(this.strategy.cacheName)).match(s)}}createHandlerBoundToURL(e){const t=this.getCacheKeyForURL(e);if(!t)throw new r("non-precached-url",{url:e});return s=>(s.request=new Request(e),s.params={cacheKey:t,...s.params},this.strategy.handle(s))}}let V;const B=()=>(V||(V=new j),V);class G extends d{constructor(e,t){super(({request:s})=>{const r=e.getURLsToCacheKeys();for(const e of function*(e,{ignoreURLParametersMatching:t=[/^utm_/,/^fbclid$/],directoryIndex:s="index.html",cleanURLs:r=!0,urlManipulation:a}={}){const n=new URL(e,location.href);n.hash="",yield n.href;const o=function(e,t=[]){for(const s of[...e.searchParams.keys()])t.some(e=>e.test(s))&&e.searchParams.delete(s);return e}(n,t);if(yield o.href,s&&o.pathname.endsWith("/")){const e=new URL(o.href);e.pathname+=s,yield e.href}if(r){const e=new URL(o.href);e.pathname+=".html",yield e.href}if(a){const e=a({url:n});for(const t of e)yield t.href}}(s.url,t)){const t=r.get(e);if(t)return{cacheKey:t}}h.debug("Precaching did not find a match for "+m(s.url))},e.strategy)}}e.CacheFirst=class extends U{async _handle(e,t){const s=[];o(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"makeRequest",paramName:"request"});let a,n=await t.cacheMatch(e);if(n)s.push(`Found a cached response in the '${this.cacheName}' cache.`);else{s.push(`No response found in the '${this.cacheName}' cache. Will respond with a network request.`);try{n=await t.fetchAndCachePut(e)}catch(e){a=e}n?s.push("Got response from network."):s.push("Unable to get a response from the network.")}h.groupCollapsed(q(this.constructor.name,e));for(const e of s)h.log(e);if(E(n),h.groupEnd(),!n)throw new r("no-response",{url:e.url,error:a});return n}},e.CacheableResponsePlugin=class{constructor(e){this.cacheWillUpdate=async({response:e})=>this._cacheableResponse.isResponseCacheable(e)?e:null,this._cacheableResponse=new P(e)}},e.NetworkFirst=class extends U{constructor(e={}){super(e),this.plugins.some(e=>"cacheWillUpdate"in e)||this.plugins.unshift(L),this._networkTimeoutSeconds=e.networkTimeoutSeconds||0,this._networkTimeoutSeconds&&c(this._networkTimeoutSeconds,"number",{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"constructor",paramName:"networkTimeoutSeconds"})}async _handle(e,t){const s=[];o(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"handle",paramName:"makeRequest"});const a=[];let n;if(this._networkTimeoutSeconds){const{id:r,promise:o}=this._getTimeoutPromise({request:e,logs:s,handler:t});n=r,a.push(o)}const i=this._getNetworkPromise({timeoutId:n,request:e,logs:s,handler:t});a.push(i);for(const e of a)t.waitUntil(e);let c=await Promise.race(a);c||(c=await i),h.groupCollapsed(q(this.constructor.name,e));for(const e of s)h.log(e);if(E(c),h.groupEnd(),!c)throw new r("no-response",{url:e.url});return c}_getTimeoutPromise({request:e,logs:t,handler:s}){let r;return{promise:new Promise(a=>{r=setTimeout(async()=>{t.push("Timing out the network response at "+this._networkTimeoutSeconds+" seconds."),a(await s.cacheMatch(e))},1e3*this._networkTimeoutSeconds)}),id:r}}async _getNetworkPromise({timeoutId:e,request:t,logs:s,handler:r}){let a,n;try{n=await r.fetchAndCachePut(t)}catch(e){a=e}return e&&clearTimeout(e),n?s.push("Got response from network."):s.push("Unable to get a response from the network. Will respond with a cached response."),!a&&n||(n=await r.cacheMatch(t),n?s.push(`Found a cached response in the '${this.cacheName}' cache.`):s.push(`No response found in the '${this.cacheName}' cache.`)),n}},e.StaleWhileRevalidate=class extends U{constructor(e){super(e),this.plugins.some(e=>"cacheWillUpdate"in e)||this.plugins.unshift(L)}async _handle(e,t){const s=[];o(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"handle",paramName:"request"});const a=t.fetchAndCachePut(e).catch(()=>{});let n,i=await t.cacheMatch(e);if(i)s.push(`Found a cached response in the '${this.cacheName}' cache. Will update with the network response in the background.`);else{s.push(`No response found in the '${this.cacheName}' cache. Will wait for the network response.`);try{i=await a}catch(e){n=e}}h.groupCollapsed(q(this.constructor.name,e));for(const e of s)h.log(e);if(E(i),h.groupEnd(),!i)throw new r("no-response",{url:e.url,error:n});return i}},e.precacheAndRoute=function(e,t){!function(e){B().precache(e)}(e),function(e){const t=B();y(new G(t,e))}(t)},e.registerRoute=y}));
